name: Build Container Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare filters
        shell: bash
        run: |
          generate_filter () {
            echo "$2<<EOF" >> $GITHUB_ENV
            for dir in $(ls -d ./$1/*/ | cut -f3 -d'/')
            do
              echo "${dir}: $1/${dir}/**/*" >> $GITHUB_ENV
            done
            echo 'EOF' >> $GITHUB_ENV
          }
          generate_list () {
            local list=()
            echo "$2<<EOF" >> $GITHUB_ENV
            for dir in $(ls -d ./$1/*/ | cut -f3 -d'/')
            do
              list+=(\"$dir\")
            done
            list_joined=$(IFS=, ; echo "${list[*]}")
            echo "[${list_joined}]" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          }
          generate_filter "src" "CHANGES_FILTER"
          generate_list "src" "CHANGES_LIST"
      - name: Find changed paths
        uses: dorny/paths-filter@v2.10.2
        id: filter
        with:
          filters: |
            ${{ env.CHANGES_FILTER }}
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Prepare configs
        id: config
        shell: bash
        run: |
          if [ ${{ github.event_name }} = workflow_dispatch ]
          then
            CHANGES='${{ env.CHANGES_LIST }}'
          else
            CHANGES='${{ steps.filter.outputs.changes }}'
          fi
          GITHUB_SHA='${{ github.sha }}'
          GITHUB_REF='${{ env.GITHUB_REF_SLUG_URL }}'
          VERSION="$(date +'%Y.%m.%d').${GITHUB_REF}-${GITHUB_SHA::8}-${{ github.run_id }}"
          echo "Setting changes parameter to ${CHANGES}"
          echo "::set-output name=changes::${CHANGES}"
          echo "Setting version parameter to ${VERSION}"
          echo "::set-output name=version::${VERSION}"
    outputs:
      changes: ${{ steps.config.outputs.changes }}
      version: ${{ steps.config.outputs.version }}

  build:
    name: Build container images
    needs: changes
    if: ${{ needs.changes.outputs.changes != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.changes.outputs.changes) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
         role-to-assume: arn:aws:iam::003767002475:role/github-oidc
         role-duration-seconds: 900 
         aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Prepare configs
        id: config
        shell: pwsh
        run: |
          $image = "${{ steps.login-ecr.outputs.registry }}/${{ secrets.REGISTRY }}/${{ matrix.project }}:${{ needs.changes.outputs.version }}"
          echo "Setting image parameter to ${image}"
          echo "::set-output name=image::${image}"
      - name: Build container image
        shell: pwsh
        run: |
          Write-Warning "Building image ${{ steps.config.outputs.image }}..."
          Get-Content ./notejam-flask/${{ matrix.project }}/Dockerfile.prod| buildah bud -f - --squash --format=docker --pull -t ${{ steps.config.outputs.image }}
      - name: Push container image
        shell: pwsh
        run: |
          Write-Warning "Pushing image ${{ steps.config.outputs.image }}..."
          buildah push ${{ steps.config.outputs.image }}